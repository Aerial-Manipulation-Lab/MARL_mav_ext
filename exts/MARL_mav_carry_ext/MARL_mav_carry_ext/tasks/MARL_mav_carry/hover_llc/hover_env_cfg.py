from __future__ import annotations

import math

import MARL_mav_carry_ext.tasks.MARL_mav_carry.hover_llc.mdp as mdp

import omni.isaac.lab.sim as sim_utils
from omni.isaac.lab.assets import ArticulationCfg, AssetBaseCfg
from omni.isaac.lab.envs import ManagerBasedRLEnvCfg
from omni.isaac.lab.managers import EventTermCfg as EventTerm
from omni.isaac.lab.managers import ObservationGroupCfg as ObsGroup
from omni.isaac.lab.managers import ObservationTermCfg as ObsTerm
from omni.isaac.lab.managers import RewardTermCfg as RewTerm
from omni.isaac.lab.managers import SceneEntityCfg
from omni.isaac.lab.managers import TerminationTermCfg as DoneTerm
from omni.isaac.lab.scene import InteractiveSceneCfg
from omni.isaac.lab.sensors import ContactSensorCfg
from omni.isaac.lab.utils import configclass

from MARL_mav_carry_ext.assets import FLYCRANE_CFG  # isort:skip

# Define the scene configuration


@configclass
class CarryingSceneCfg(InteractiveSceneCfg):
    """Configuration for multi-drone lifting system"""

    # Ground-plane
    ground = AssetBaseCfg(prim_path="/World/defaultGroundPlane", spawn=sim_utils.GroundPlaneCfg())

    # Lights
    distant_light = AssetBaseCfg(
        prim_path="/World/Light", spawn=sim_utils.DistantLightCfg(intensity=3000.0, color=(0.75, 0.75, 0.75))
    )

    # Drones
    robot: ArticulationCfg = FLYCRANE_CFG.replace(prim_path="{ENV_REGEX_NS}/flycrane")
    robot.spawn.activate_contact_sensors = True

    # TODO: add joint constraints, either in URDF or here
    contact_forces = ContactSensorCfg(
        prim_path="{ENV_REGEX_NS}/flycrane/.*", update_period=0.0, history_length=3, debug_vis=True
    )
    # frame_transformer = FrameTransformerCfg(prim_path="/World/defaultGroundPlane", target_frames={ENV_REGEX_NS})


# MDP settings


@configclass
class CommandsCfg:
    """Commands for the hovering task"""

    pose_command = mdp.UniformPoseCommandGlobalCfg(
        asset_name="robot",
        body_name="load_link",
        resampling_time_range=(30, 30),  # out of range of max episode length for now
        debug_vis=False,
        ranges=mdp.UniformPoseCommandGlobalCfg.Ranges(
            pos_x=(-1.0, 1.0),
            pos_y=(-1.0, 1.0),
            pos_z=(1.0, 2.0),
            roll=(-0.0, 0.0),
            pitch=(-0.0, 0.0),
            yaw=(-math.pi, math.pi),
        ),
    )


@configclass
class ActionsCfg:
    """Actions for the hovering task.

    The ActionTerm is responsible for processing the actions and applying them to the robot,
    based on the waypoint given that will later be a trajectory generated by the policy."""

    low_level_action: mdp.LowLevelActionCfg = mdp.LowLevelActionCfg(
        asset_name="robot", body_name="Falcon.*rotor_.*", debug_vis=True
    )


@configclass
class ObservationsCfg:
    """Observations for the hovering task."""

    @configclass
    class PolicyCfg(ObsGroup):
        """Observation terms for the policy."""

        # payload and drone states
        payload_pose = ObsTerm(func=mdp.payload_position)  # can add noise later
        payload_orientation = ObsTerm(func=mdp.payload_orientation) 
        payload_linear_velocities = ObsTerm(func=mdp.payload_linear_velocities) 
        payload_angular_velocities = ObsTerm(func=mdp.payload_angular_velocities)  
        payload_linear_accelerations = ObsTerm(func=mdp.payload_linear_acceleration)
        payload_angular_accelerations = ObsTerm(func=mdp.payload_angular_acceleration)
        drone_positions = ObsTerm(func=mdp.drone_positions)  
        drone_orientations = ObsTerm(func=mdp.drone_orientations)  
        drone_linear_velocities = ObsTerm(func=mdp.drone_linear_velocities)  
        drone_angular_velocities = ObsTerm(func=mdp.drone_angular_velocities)
        drone_linear_accelerations = ObsTerm(func=mdp.drone_linear_acceleration)
        drone_angular_accelerations = ObsTerm(func=mdp.drone_angular_acceleration)

        # goal error terms
        payload_positional_error = ObsTerm(func=mdp.payload_positional_error)
        payload_orientation_error = ObsTerm(func=mdp.payload_orientation_error)

        # relative positions terms
        payload_drone_rpos = ObsTerm(func=mdp.payload_drone_rpos)
        drone_rpos = ObsTerm(func=mdp.drone_rpos_obs)
        drone_pdist = ObsTerm(func=mdp.drone_pdist_obs)
        cable_angle = ObsTerm(func=mdp.cable_angle)

        def __post_init__(self):
            self.enable_corruption = True  # for adding noise to the observations
            self.concatenate_terms = True

    # Observation group
    policy: PolicyCfg = PolicyCfg()


@configclass
class EventCfg:
    """Events for the hovering task.

    Resetting states on resets, disturbances, etc.
    """

    # reset_base = EventTerm(
    #     func=mdp.reset_root_state_uniform,
    #     mode="reset",
    #     params={
    #         "pose_range": {
    #             "x": (-1.0, 1.0),
    #             "y": (-1.0, 1.0),
    #             "z": (1.0, 2.0),
    #             "roll": (-0.0, 0.0),
    #             "pitch": (-0.0, 0.0),
    #             "yaw": (-math.pi, math.pi),
    #         },
    #         "velocity_range": {
    #             "x": (-0.0, 0.0),
    #             "y": (-0.0, 0.0),
    #             "z": (-0.0, 0.0),
    #             "roll": (-0.0, 0.0),
    #             "pitch": (-0.0, 0.0),
    #             "yaw": (-0.0, 0.0),
    #         },
    #     },
    # )

    reset_base = EventTerm(
        func=mdp.reset_root_state_uniform,
        mode="reset",
        params={
            "pose_range": {
                "x": (0.0, 0.0),
                "y": (0.0, 0.0),
                "z": (1.0, 1.0),
                "roll": (0.0, 0.0),
                "pitch": (0.0, 0.0),
                "yaw": (0.0, 0.0),
            },
            "velocity_range": {
                "x": (0.0, 0.0),
                "y": (0.0, 0.0),
                "z": (0.0, 0.0),
                "roll": (0.0, 0.0),
                "pitch": (0.0, 0.0),
                "yaw": (0.0, 0.0),
            },
        },
    )

    base_external_force_torque = EventTerm(
        func=mdp.apply_external_force_torque,
        mode="reset",
        params={
            "asset_cfg": SceneEntityCfg("robot", body_names=".*"),
            "force_range": (0.0, 0.0),
            "torque_range": (-0.0, 0.0),
        },
    )

    reset_robot_joints = EventTerm(
        func=mdp.reset_joints_by_scale,
        mode="reset",
        params={
            "position_range": (0.0, 0.0),
            "velocity_range": (0.0, 0.0),
        },
    )


@configclass
class RewardsCfg:
    """Rewards for the hovering task."""

    omnidrones_reward = RewTerm(
        func=mdp.OmniDrones_reward,
        weight=1.0,
        params={"debug_vis": True, "command_name": "pose_command"},
    )


@configclass
class TerminationsCfg:
    """Terminal conditions for the hovering task.

    When the payload reaches a certain height, etc."""

    # end when sim times out
    time_out = DoneTerm(func=mdp.time_out, time_out=True)
    # end when falcons crash
    falcon_fly_low = DoneTerm(func=mdp.falcon_fly_low, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.1})
    payload_fly_low = DoneTerm(
        func=mdp.payload_fly_low, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.1}
    )

    illegal_contact = DoneTerm(
        func=mdp.illegal_contact,
        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*"), "threshold": 0.5},
    )
    # end when angular velocity of payload is too high
    payload_spin = DoneTerm(func=mdp.payload_spin, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 10.0})

    payload_angle = DoneTerm(
        func=mdp.payload_angle_cos, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.1}
    )

    # end when angular velocity of falcon is too high
    falcon_spin = DoneTerm(func=mdp.falcon_spin, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 10.0})

    nan_states = DoneTerm(func=mdp.nan_states, params={"asset_cfg": SceneEntityCfg("robot")})
    large_states = DoneTerm(func=mdp.large_states, params={"asset_cfg": SceneEntityCfg("robot")})
    angle_drones_cable = DoneTerm(
        func=mdp.cable_angle_drones_cos, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.0}
    )
    bounding_box = DoneTerm(func=mdp.bounding_box, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 5.0})


@configclass
class CurriculumCfg:
    """Curriculum for the hovering task."""

    pass


@configclass
class HoverEnvCfg_llc(ManagerBasedRLEnvCfg):
    """Configuration for the hovering task."""

    scene: CarryingSceneCfg = CarryingSceneCfg(num_envs=1, env_spacing=4.0)
    commands: CommandsCfg = CommandsCfg()
    actions: ActionsCfg = ActionsCfg()
    observations: ObservationsCfg = ObservationsCfg()
    events: EventCfg = EventCfg()
    rewards: RewardsCfg = RewardsCfg()
    terminations: TerminationsCfg = TerminationsCfg()
    curriculum: CurriculumCfg = CurriculumCfg()

    def __post_init__(self):
        """Post initialization."""
        # general settings
        self.decimation = 4
        self.episode_length_s = 20.0
        # simulation settings
        self.sim.dt = 0.005
        self.sim.render_interval = self.decimation
        self.sim.disable_contact_processing = True
        self.sim.gravity = (0.0, 0.0, -9.8066)
