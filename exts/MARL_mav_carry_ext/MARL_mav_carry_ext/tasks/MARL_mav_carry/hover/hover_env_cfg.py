import omni.isaac.lab.sim as sim_utils
import math

from omni.isaac.lab.scene import InteractiveSceneCfg
from omni.isaac.lab.utils import configclass
from omni.isaac.lab.assets import ArticulationCfg, AssetBaseCfg
from MARL_mav_carry_ext.assets import FLYCRANE_CFG  # isort:skip
import MARL_mav_carry_ext.tasks.MARL_mav_carry.hover.mdp as mdp

from omni.isaac.lab.managers import ObservationGroupCfg as ObsGroup
from omni.isaac.lab.managers import ObservationTermCfg as ObsTerm
from omni.isaac.lab.managers import TerminationTermCfg as DoneTerm


# Define the scene configuration

@configclass
class CarryingSceneCfg(InteractiveSceneCfg):
    """Configuration for multi-drone lifting system"""

    # Ground-plane
    ground = AssetBaseCfg(prim_path="/World/defaultGroundPlane", spawn=sim_utils.GroundPlaneCfg())

    # Lights
    distant_light = AssetBaseCfg(
        prim_path="/World/Light", spawn=sim_utils.DistantLightCfg(intensity=3000.0, color=(0.75, 0.75, 0.75))
    )

    # Drones
    robot: ArticulationCfg = FLYCRANE_CFG.replace(prim_path="{ENV_REGEX_NS}/flycrane") #TODO: add joint constraints, either in URDF or here

# MDP settings

@configclass
class CommandsCfg:
    """Commands for the hovering task, TODO: make the flycrane hover at different positions"""
    # null = mdp.NullCommandCfg()

    pose_command = mdp.UniformPoseCommandCfg(
    asset_name="robot",
    body_name="load_link",
    resampling_time_range=(8.0, 8.0),
    debug_vis=True,
    # ranges=mdp.UniformPoseCommandCfg.Ranges(pos_x=(-3.0, 3.0), pos_y=(-3.0, 3.0), heading=(-math.pi, math.pi)),
    ranges=mdp.UniformPoseCommandCfg.Ranges(pos_x=(-1.0, 1.0), pos_y=(-1.0, 1.0), 
                                            pos_z=(0.5, 1.5), roll=(-0.0, 0.0),
                                            pitch=(-0.0, 0.0), yaw=(-math.pi, math.pi)),    
)

@configclass
class ActionsCfg:
    """Actions for the hovering task.
    
    The ActionTerm is responsible for processing the actions and applying them to the robot,
    based on the waypoint given that will later be a trajectory generated by the policy."""
    low_level_action : mdp.LowLevelActionCfg = mdp.LowLevelActionCfg(
        asset_name="robot",
        body_name="Falcon.*base_link")

@configclass
class ObservationsCfg:
    """Observations for the hovering task."""

    @configclass
    class PolicyCfg(ObsGroup):
        """Observation terms for the policy."""
        payload_pose = ObsTerm(func=mdp.payload_pose) # can add noise later
        drone_poses = ObsTerm(func=mdp.drone_poses) # can add noise later
        pose_command = ObsTerm(func=mdp.generated_commands, params={"command_name": "pose_command"})

    # Observation group
    policy: PolicyCfg = PolicyCfg()

@configclass
class EventCfg:
    """Events for the hovering task.
    
    Resetting states on resets, disturbances, etc.
    """
    reset_base = EventTerm(
        func=mdp.reset_root_state_uniform,
        mode="reset",
        params={
            "pose_range": {
                "x": (-0.5, 0.5), 
                "y": (-0.5, 0.5), 
                "z": (0.5, 1.5),
                "roll": (-0.0, 0.0),
                "pitch": (-0.0, 0.0),
                "yaw": (-3.14, 3.14)
            },
            "velocity_range": {
                "x": (-0.0, 0.0),
                "y": (-0.0, 0.0),
                "z": (-0.0, 0.0),
                "roll": (-0.0, 0.0),
                "pitch": (-0.0, 0.0),
                "yaw": (-0.0, 0.0),
            },
        },
    )


@configclass
class RewardsCfg:
    """Rewards for the hovering task.

    Pose of payload, angle between strings"""
    
@configclass
class TerminationsCfg:
    """Terminal conditions for the hovering task.

    When the payload reaches a certain height, etc."""
    time_out = DoneTerm(func=mdp.time_out, time_out=True)

@configclass
class CurriculumCfg:
    """Curriculum for the hovering task."""

    pass

@configclass
class HoverEnvCfg:
    """Configuration for the hovering task."""

    commands: CommandsCfg = CommandsCfg()
    actions: ActionsCfg = ActionsCfg()
    observations: ObservationsCfg = ObservationsCfg()
    events: EventCfg = EventCfg()
    rewards: RewardsCfg = RewardsCfg()
    terminations: TerminationsCfg = TerminationsCfg()
    curriculum: CurriculumCfg = CurriculumCfg()
