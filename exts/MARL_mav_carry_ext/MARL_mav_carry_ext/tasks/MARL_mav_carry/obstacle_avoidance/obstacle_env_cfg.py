from __future__ import annotations

import math

import MARL_mav_carry_ext.tasks.MARL_mav_carry.mdp_llc as mdp
from MARL_mav_carry_ext.tasks.MARL_mav_carry.mdp_llc.utils import import_ref_folder_from_csv

import omni.isaac.lab.sim as sim_utils
from omni.isaac.lab.assets import ArticulationCfg, AssetBaseCfg, RigidObjectCfg
from omni.isaac.lab.envs import ManagerBasedRLEnvCfg
from omni.isaac.lab.managers import EventTermCfg as EventTerm
from omni.isaac.lab.managers import ObservationGroupCfg as ObsGroup
from omni.isaac.lab.managers import ObservationTermCfg as ObsTerm
from omni.isaac.lab.managers import RewardTermCfg as RewTerm
from omni.isaac.lab.managers import SceneEntityCfg
from omni.isaac.lab.managers import TerminationTermCfg as DoneTerm
from omni.isaac.lab.scene import InteractiveSceneCfg
from omni.isaac.lab.sensors import ContactSensorCfg
from omni.isaac.lab.utils import configclass

from MARL_mav_carry_ext.assets import FLYCRANE_CFG  # isort:skip
import omni.isaac.lab.sim as sim_utils
# Define the scene configuration


@configclass
class CarryingSceneCfg(InteractiveSceneCfg):
    """Configuration for multi-drone lifting system"""

    # Ground-plane
    ground = AssetBaseCfg(prim_path="/World/defaultGroundPlane", spawn=sim_utils.GroundPlaneCfg())

    # Lights
    distant_light = AssetBaseCfg(
        prim_path="/World/Light", spawn=sim_utils.DistantLightCfg(intensity=3000.0, color=(0.75, 0.75, 0.75))
    )

    # Drones
    robot: ArticulationCfg = FLYCRANE_CFG.replace(prim_path="{ENV_REGEX_NS}/flycrane")
    robot.spawn.activate_contact_sensors = True

    contact_forces = ContactSensorCfg(
        prim_path="{ENV_REGEX_NS}/flycrane/.*", update_period=0.0, history_length=3, debug_vis=False
    )

    # obstacles
    wall: RigidObjectCfg = RigidObjectCfg(
        prim_path="{ENV_REGEX_NS}/wall",
        spawn=sim_utils.CuboidCfg(
            size=(0.1, 1.5, 3.0),
            rigid_props=sim_utils.RigidBodyPropertiesCfg(kinematic_enabled=True),
            mass_props=sim_utils.MassPropertiesCfg(mass=100.0),
            collision_props=sim_utils.CollisionPropertiesCfg(),
            visual_material=sim_utils.PreviewSurfaceCfg(),
        ),
        init_state=RigidObjectCfg.InitialStateCfg(pos=(0.0, 0.0, 1.5)),
    )


# MDP settings


@configclass
class CommandsCfg:
    """Commands for the tracking task"""

    pose_command = mdp.UniformPoseCommandGlobalCfg(
        asset_name="robot",
        body_name="load_link",
        resampling_time_range=(20, 20),  # out of range of max episode length for now
        debug_vis=False,
        ranges=mdp.UniformPoseCommandGlobalCfg.Ranges(
            pos_x=(-2.0, -1.5),
            pos_y=(-0.5, 0.5),
            pos_z=(1.0, 1.5),
            roll=(-math.pi / 4, math.pi / 4),
            pitch=(-math.pi / 4, math.pi / 4),
            yaw=(-math.pi, math.pi),
        ),
    )

@configclass
class ActionsCfg:
    """Actions for the tracking task.

    The ActionTerm is responsible for processing the actions and applying them to the robot,
    based on the waypoint given that will later be a trajectory generated by the policy."""

    low_level_action: mdp.LowLevelActionCfg = mdp.LowLevelActionCfg(
        asset_name="robot", body_name="Falcon.*rotor_.*", debug_vis=True
    )


@configclass
class ObservationsCfg:
    """Observations for the tracking task."""

    @configclass
    class PolicyCfg(ObsGroup):
        """Observation terms for the policy."""

        # payload and drone states
        payload_pos = ObsTerm(func=mdp.payload_position)  # can add noise later
        payload_orientation = ObsTerm(func=mdp.payload_orientation)
        payload_linear_velocities = ObsTerm(func=mdp.payload_linear_velocities)
        payload_angular_velocities = ObsTerm(func=mdp.payload_angular_velocities)
        payload_linear_accelerations = ObsTerm(func=mdp.payload_linear_acceleration)
        payload_angular_accelerations = ObsTerm(func=mdp.payload_angular_acceleration)
        drone_positions = ObsTerm(func=mdp.drone_positions)
        drone_orientations = ObsTerm(func=mdp.drone_orientations)
        drone_linear_velocities = ObsTerm(func=mdp.drone_linear_velocities)
        drone_angular_velocities = ObsTerm(func=mdp.drone_angular_velocities)
        drone_linear_accelerations = ObsTerm(func=mdp.drone_linear_acceleration)
        drone_angular_accelerations = ObsTerm(func=mdp.drone_angular_acceleration)

        # goal error terms
        payload_positional_error = ObsTerm(func=mdp.payload_positional_error, params={"command_name": "pose_command"})
        payload_orientation_error = ObsTerm(func=mdp.payload_orientation_error, params={"command_name": "pose_command"})

        # relative positions terms
        payload_drone_rpos = ObsTerm(func=mdp.payload_drone_rpos)
        drone_rpos = ObsTerm(func=mdp.drone_rpos_obs)
        drone_pdist = ObsTerm(func=mdp.drone_pdist_obs)
        cable_angle = ObsTerm(func=mdp.cable_angle)

        # obstacle terms
        wall_state = ObsTerm(func=mdp.wall_state)

        def __post_init__(self):
            self.enable_corruption = True  # for adding noise to the observations
            self.concatenate_terms = True

    # Observation group
    policy: PolicyCfg = PolicyCfg()


@configclass
class EventCfg:
    """Events for the tracking task.

    Resetting states on resets, disturbances, etc.
    """

    reset_base = EventTerm(
        func=mdp.reset_root_state_uniform,
        mode="reset",
        params={
            "pose_range": {
                "x": (2.5, 3.0),
                "y": (-0.5, 0.5),
                "z": (1.0, 1.5),
                "roll":(-math.pi / 4, math.pi / 4),
                "pitch":(-math.pi / 4, math.pi / 4),
                "yaw":(-math.pi, math.pi),
            },
            "velocity_range": {
                "x": (-0.0, 0.0),
                "y": (-0.0, 0.0),
                "z": (-0.0, 0.0),
                "roll": (-0.0, 0.0),
                "pitch": (-0.0, 0.0),
                "yaw": (-0.0, 0.0),
            },
        },
    )

    base_external_force_torque = EventTerm(
        func=mdp.apply_external_force_torque,
        mode="reset",
        params={
            "asset_cfg": SceneEntityCfg("robot", body_names=".*"),
            "force_range": (0.0, 0.0),
            "torque_range": (-0.0, 0.0),
        },
    )

    reset_robot_joints = EventTerm(
        func=mdp.reset_joints_by_scale,
        mode="reset",
        params={
            "position_range": (0.0, 0.0),
            "velocity_range": (0.0, 0.0),
        },
    )


@configclass
class RewardsCfg:
    """Rewards for the tracking task."""

    position_reward = RewTerm(
        func=mdp.track_payload_pos_command,
        weight=3.0,
        params={"command_name": "pose_command", "asset_cfg": SceneEntityCfg("robot")},
    )

    orientation_reward = RewTerm(
        func=mdp.track_payload_orientation_command,
        weight=8.0,
        params={"command_name": "pose_command", "debug_vis": False, "asset_cfg": SceneEntityCfg("robot")},
    )

    # policy_action_smoothness = RewTerm(
    #     func=mdp.action_smoothness_reward,
    #     weight=1.0,
    # )

    force_penalty = RewTerm(
        func=mdp.action_penalty_rel,
        weight=0.2,
    )

    force_smoothness = RewTerm(
        func=mdp.action_smoothness_force_reward,
        weight=0.5,
    )

    downwash_reward = RewTerm(
        func=mdp.downwash_reward,
        weight=1.0,
    )


@configclass
class TerminationsCfg:
    """Terminal conditions for the hovering task.

    When the payload reaches a certain height, etc."""

    # end when sim times out
    time_out = DoneTerm(func=mdp.time_out, time_out=True)

    illegal_contact = DoneTerm(
        func=mdp.illegal_contact,
        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*"), "threshold": 0.1},
    )

    # end when falcons crash
    falcon_fly_low = DoneTerm(func=mdp.falcon_fly_low, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.1})
    payload_fly_low = DoneTerm(
        func=mdp.payload_fly_low, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.1}
    )

    angle_drones_cable = DoneTerm(
        func=mdp.cable_angle_drones_cos, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.05}
    )
    angle_load_cable = DoneTerm(
        func=mdp.cable_angle_payload_cos, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.00}
    )

    large_states = DoneTerm(func=mdp.large_states, params={"asset_cfg": SceneEntityCfg("robot")})

    nan_observation = DoneTerm(func=mdp.nan_obs, params={"group_name": "policy"})

    cables_collide = DoneTerm(
        func=mdp.cable_collision, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.15, "num_points": 6}
    )

    drones_collide = DoneTerm(func=mdp.drone_collision, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.4})

    bounding_box = DoneTerm(func=mdp.bounding_box, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 20.0})


@configclass
class CurriculumCfg:
    """Curriculum for the hovering task."""

    pass


@configclass
class ObstacleEnvCfg(ManagerBasedRLEnvCfg):
    """Configuration for the hovering task."""

    scene: CarryingSceneCfg = CarryingSceneCfg(num_envs=1, env_spacing=8.0)
    commands: CommandsCfg = CommandsCfg()
    actions: ActionsCfg = ActionsCfg()
    observations: ObservationsCfg = ObservationsCfg()
    events: EventCfg = EventCfg()
    rewards: RewardsCfg = RewardsCfg()
    terminations: TerminationsCfg = TerminationsCfg()
    curriculum: CurriculumCfg = CurriculumCfg()

    def __post_init__(self):
        """Post initialization."""
        # general settings
        self.decimation = 10
        self.episode_length_s = 40.0
        # simulation settings
        self.sim.dt = 0.005
        self.sim.render_interval = self.decimation  # rendering interval has to be planner decimation
        self.sim.disable_contact_processing = True
        self.sim.gravity = (0.0, 0.0, -9.8066)
