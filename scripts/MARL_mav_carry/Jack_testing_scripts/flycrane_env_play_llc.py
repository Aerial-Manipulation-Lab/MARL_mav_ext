# Copyright (c) 2022-2024, The Isaac Lab Project Developers.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

"""
This script demonstrates how to simulate a quadcopter.

"""

"""Launch Isaac Sim Simulator first."""

import argparse
import torch

from omni.isaac.lab.app import AppLauncher

# add argparse arguments
parser = argparse.ArgumentParser(description="This script demonstrates how to simulate a quadcopter.")
parser.add_argument("--num_envs", type=int, default=1, help="Number of environments to spawn.")

# append AppLauncher cli args
AppLauncher.add_app_launcher_args(parser)
# parse the arguments
args_cli = parser.parse_args()

# launch omniverse app
app_launcher = AppLauncher(args_cli)
simulation_app = app_launcher.app

"""Rest everything follows."""

from gymnasium.spaces import Box

from MARL_mav_carry_ext.tasks.MARL_mav_carry.hover_llc.hover_env_cfg import HoverEnvCfg_llc
from MARL_mav_carry_ext.splines import minimum_snap_spline, evaluate_trajectory

from omni.isaac.lab.envs import ManagerBasedRLEnv
import matplotlib.pyplot as plt
import math

def main():
    """Main function."""
    # create environment config
    env_cfg = HoverEnvCfg_llc()
    env_cfg.scene.num_envs = args_cli.num_envs
    # setup RL environment
    env = ManagerBasedRLEnv(cfg=env_cfg)
    env.action_space = Box(-1.0, 1.0, shape=(env.scene.num_envs, 12), dtype="float32")
    robot_mass = env.scene["robot"].root_physx_view.get_masses().sum()
    gravity = torch.tensor(env.sim.cfg.gravity, device=env.sim.device).norm()
    falcon_mass = 0.6 + 0.0042 * 4 + 0.00002
    rope_mass = 0.0033692587500000004 * 7 + 0.001 * 14
    payload_mass = 1.4 + 0.00001 + 0.006
    mass_left_side = 2 * falcon_mass + 2 * rope_mass + 0.5 * payload_mass
    mass_right_side = falcon_mass + rope_mass + 0.5 * payload_mass
    # print(env.scene["robot"].root_physx_view.get_masses())
    # simulate physics
    # Example usage: define 3D waypoints and corresponding timestamps
    # time_horizon = 3 #sec
    # Waypoint references (generated by RL policy) for the quintic spline. Each waypoint is [pos, vel, acc, yaw]
    # [pos, vel, acc] is used in the quintic spline to create a reference trajectory, yaw is used in the geometric controller
    # num_points = 4

    # waypoints_test = torch.tensor([0.28, 0.05, 2.5, 0.1, -0.23, 0, 0.0, -0.0, 0.0, # point 1
    #                              0.36, -0.1, 2.5, 0.1, -0.23, 0, 0, -0.0, 0, # point 2
    #                              0.45, -0.3, 2.5, 0.1, -0.23, 0, 0, -0.0, 0, # point 3
    #                              0.5, -0.5, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], dtype=torch.float32) # point 4
    # times = (torch.arange(num_points + 1).float())/num_points # Timestamps
    # times *= time_horizon
    # # Generate the minimum snap spline
    # init_state = torch.tensor([0.2, 0.2, 2.2, 0,0,0,0,0,0], dtype=torch.float32)
    # waypoints_3d = torch.cat([init_state, waypoints_test])
    # coeffs_list_3d = minimum_snap_spline(waypoints_3d, times)
    # # Evaluate the trajectory at different time points
    # positions = []
    # velocities = []
    # accelerations = []
    # eval_times = torch.linspace(0, time_horizon, 100)
    # for t_eval in eval_times:
    #     position, velocity, acceleration, jerk, snap = evaluate_trajectory(coeffs_list_3d, times, t_eval)
    #     positions.append(position.cpu())
    #     velocities.append(velocity.cpu())
    #     accelerations.append(acceleration.cpu())

    # # Plot velocities against time
    # plt.figure()
    # plt.plot(eval_times, positions)
    # plt.xlabel('Time')
    # plt.ylabel('positions')
    # plt.title('positions vs Time')
    # plt.legend(['X', 'Y', 'Z'])

    # # Plot velocities against time
    # plt.figure()
    # plt.plot(eval_times, velocities)
    # plt.xlabel('Time')
    # plt.ylabel('Velocities')
    # plt.title('Velocities vs Time')
    # plt.legend(['X', 'Y', 'Z'])

    # # Plot accelerations against time
    # plt.figure()
    # plt.plot(eval_times, accelerations)
    # plt.xlabel('Time')
    # plt.ylabel('Accelerations')
    # plt.title('Accelerations vs Time')
    # plt.legend(['X', 'Y', 'Z'])

    # plt.show()

    count = 0
    while simulation_app.is_running():
        with torch.inference_mode():
            # reset
            if count % 500 == 0:
                count = 0
                env.reset()
                print("-" * 80)
                print("[INFO]: Resetting environment...")
                waypoint = torch.zeros_like(env.action_manager.action)
                waypoint[:] = torch.tensor([[0.3275, 0.05, 2.2, 0.1, -0.23, 0, 0.0, -0.0, 0.0, # point 1 drone 1
                                            0.385, -0.1, 2.3, 0.1, -0.23, 0, 0, -0.0, 0, # point 2
                                            0.45, -0.3, 2.4, 0.1, -0.23, 0, 0, -0.0, 0, # point 3
                                            0.5, -0.5, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, # point 4
                                            0.1, -0.17, 2.2, -0.23, 0.07, 0, 0.0, -0.0, 0.0, # point 1 drone 2
                                            -0.15, -0.12, 2.3, -0.23, 0.07, 0, 0, -0.0, 0, # point 2
                                            -0.3, -0.06, 2.4, -0.23, 0.07, 0, 0, -0.0, 0, # point 3
                                            -0.5, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, # point 4 
                                            -0.05, 0.125, 2.2, 0.23, 0.17, 0, 0.0, -0.0, 0.0, # point 1 drone 3
                                            0.1, 0.25, 2.3, 0.23, 0.17, 0, 0, -0.0, 0, # point 2
                                            0.3, 0.375, 2.4, 0.23, 0.17, 0, 0, -0.0, 0, # point 3
                                            0.5, 0.5, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,]], dtype=torch.float32) # point 4
                # waypoint[1:] = torch.tensor([[0.5, -0.5, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0,
                #                              -0.5, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0,
                #                              0.5, 0.5, 2.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0,]])
            # step the environment
            obs, rew, terminated, truncated, info = env.step(waypoint)
            # print current orientation of pole
            # print("[Env 0]: Pole joint: ", obs["policy"][0][1].item())
            # update counter
            count += 1

    # close the simulator
    env.close()


if __name__ == "__main__":
    # run the main function
    main()
    # close sim app
    simulation_app.close()
